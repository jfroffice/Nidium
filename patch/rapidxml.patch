--- rapidxml/rapidxml.hpp
+++ rapidxml/rapidxml.hpp
@@ -1,6 +1,8 @@
 #ifndef RAPIDXML_HPP_INCLUDED
 #define RAPIDXML_HPP_INCLUDED
 
+#include <stdio.h>
+
 // Copyright (C) 2006, 2009 Marcin Kalicinski
 // Version 1.13
 // Revision $DateTime: 2009/05/13 01:46:17 $
@@ -2031,7 +2033,51 @@ namespace rapidxml
             text += 3;      // Skip ]]>
             return cdata;
         }
-        
+        template<int Flags>
+        xml_node<Ch> *parse_script(Ch *&text)
+        {
+            // Create element node
+            xml_node<Ch> *element = this->allocate_node(node_element);
+
+            Ch *name = text;
+            skip<node_name_pred, Flags>(text);
+
+           if (text == name)
+                RAPIDXML_PARSE_ERROR("expected element name", text);
+
+            element->name(name, text - name);
+            // Skip whitespace between element name and attributes or >
+            skip<whitespace_pred, Flags>(text);
+
+            // Parse attributes, if any
+            parse_node_attributes<Flags>(text, element);
+
+            if (*text == Ch('>'))
+            {
+                ++text;
+                Ch *value = text;
+
+                while (text[0] != Ch('<') || text[1] != Ch('/') || text[2] != Ch('s') ||
+                     text[3] != Ch('c') || text[4] != Ch('r') || text[5] != Ch('i') ||
+                     text[6] != Ch('p') || text[7] != Ch('t') || text[8] != Ch('>'))
+                {
+                    if (!text[0])
+                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);
+
+                    ++text;
+                }
+
+                element->value(value, text - value);
+
+                if (!(Flags & parse_no_string_terminators))
+                    *text = Ch('\0');
+                }
+
+                text += 9;
+
+            return element;
+        }
+
         // Parse element node
         template<int Flags>
         xml_node<Ch> *parse_element(Ch *&text)
@@ -2089,6 +2135,19 @@ namespace rapidxml
                 // Parse and append element node
                 return parse_element<Flags>(text);
 
+            /*
+                Nidium - Anthony Catel :
+                Parse script tags independantly
+            */
+            case Ch('s'):
+                if (text[1] == Ch('c') && text[2] == Ch('r') &&
+                    text[3] == Ch('i') && text[4] == Ch('p') &&
+                    text[5] == 't' && text[6] == '>')
+                {
+                    return parse_script<Flags>(text);
+                } 
+
+                return parse_element<Flags>(text);
             // <?...
             case Ch('?'): 
                 ++text;     // Skip ?
