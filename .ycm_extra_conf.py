# Generated by YCM Generator at 2016-06-05 03:13:56.268500

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core

flags = [
    '-x',
    'c++',
    '-DCARES_STATICLIB',
    '-DDSO_EXTENSION=".so"',
    '-DENABLE_ASSEMBLER=1',
    '-DENABLE_JIT=1',
    '-DEXPORT_JS_API',
    '-DFD_SETSIZE=2048',
    '-DGR_GL_CUSTOM_SETUP_HEADER=<../patch/skia_gl_config.h>',
    '-DGR_LINUX_BUILD=1',
    '-DGR_RELEASE=1',
    '-DIMPL_MFBT',
    '-DJSGC_USE_EXACT_ROOTING',
    '-DJS_THREADSAFE',
    '-DNDEBUG',
    '-DNIDIUM_AUDIO_ENABLED',
    '-DNIDIUM_BUILD="1631ffa8e1c9990b8d3767d4e021cfcfd8f24121"',
    '-DNIDIUM_USE_GTK',
    '-DNIDIUM_VERSION_STR="0.1"',
    '-DNIDIUM_WEBGL_ENABLED',
    '-DSK_ALLOW_STATIC_GLOBAL_INITIALIZERS=1',
    '-DSK_BUILD_FOR_UNIX',
    '-DSK_CAN_USE_FLOAT',
    '-DSK_GAMMA_APPLY_TO_A8',
    '-DSK_GAMMA_SRGB',
    '-DSK_RELEASE',
    '-DSK_SAMPLES_FOR_X',
    '-DSK_SCALAR_IS_FLOAT',
    '-DSK_SUPPORT_GPU=1',
    '-DSK_SUPPORT_PDF',
    '-DSK_USE_POSIX_THREADS',
    '-DTRACING',
    '-DUINT32_MAX=4294967295u',
    '-DUSE_SYSTEM_MALLOC=1',
    '-D_HAVE_SSL_SUPPORT',
    '-D__STDC_CONSTANT_MACROS',
    '-D__STDC_LIMIT_MACROS',
    '-Isrc',
    '-Isrc/AV',
    '-Isrc/Interface',
    '-Isrc/Interface/linux',
    '-Isrc/libapenetwork',
    '-Isrc/libapenetwork/src',
    '-Ithird-party/SDL2/include',
    '-Ithird-party/angle/include',
    '-Ithird-party/basekit/source',
    '-Ithird-party/c-ares',
    '-Ithird-party/ffmpeg',
    '-Ithird-party/gtest/googletest/include',
    '-Ithird-party/http-parser',
    '-Ithird-party/jsoncpp/dist',
    '-Ithird-party/leveldb/include',
    '-Ithird-party/libcoroutine/source',
    '-Ithird-party/libzip/lib',
    '-Ithird-party/mozilla-central/dist/include',
    '-Ithird-party/mozilla-central/js/src',
    '-Ithird-party/mozilla-central/nsprpub/dist/include/nspr',
    '-Ithird-party/openssl/include',
    '-Ithird-party/portaudio/include',
    '-Ithird-party/portaudio/src/common',
    '-Ithird-party/rapidxml',
    '-Ithird-party/skia',
    '-Ithird-party/skia/include/config',
    '-Ithird-party/skia/include/core',
    '-Ithird-party/skia/include/device',
    '-Ithird-party/skia/include/effects',
    '-Ithird-party/skia/include/gpu',
    '-Ithird-party/skia/include/images',
    '-Ithird-party/skia/include/lazy',
    '-Ithird-party/skia/include/pdf',
    '-Ithird-party/skia/include/pipe',
    '-Ithird-party/skia/include/test',
    '-Ithird-party/skia/include/utils',
    '-Ithird-party/skia/include/utils/mac',
    '-Ithird-party/skia/src/core',
    '-Ithird-party/skia/src/effects',
    '-Ithird-party/skia/src/gpu',
    '-Ithird-party/skia/src/gpu/gl',
    '-Ithird-party/zita-resampler/libs',
    '-Ithird-party/zlib',
    '-I/usr/include/atk-1.0',
    '-I/usr/include/cairo',
    '-I/usr/include/freetype2',
    '-I/usr/include/gdk-pixbuf-2.0',
    '-I/usr/include/glib-2.0',
    '-I/usr/include/gtk-2.0',
    '-I/usr/include/harfbuzz',
    '-I/usr/include/libdrm',
    '-I/usr/include/libpng16',
    '-I/usr/include/pango-1.0',
    '-I/usr/include/pixman-1',
    '-I/usr/lib/glib-2.0/include',
    '-I/usr/lib/gtk-2.0/include',
    '-Wall',
    '-Wno-c++0x-extensions',
    '-Wno-invalid-offsetof',
    '-Wno-mismatched-tags',
    '-std=c++11',
    '-include', '../build//third-party//js-config.h',
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

