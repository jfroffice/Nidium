/* --------------------------------------------------------------------------- *
 * Native Application Debugger                             (c) 2013 Stight.com * 
 * --------------------------------------------------------------------------- * 
 * Version:     0.50                                                           *
 * Author:      Vincent Fontaine                                               *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sellcopies of the Software, and to permit persons to whom the        *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 * --------------------------------------------------------------------------- * 
 */

var NatBug = {
	panes : [],
	console : null,

	init : function(x=28, y=490){
		if (!this.loaded){
			this.loaded = true;

			this.createApp(x, y);
			this.createTabController();

			Native.showFPS(true);
			Native.FPS.init();
		}
	},

	attachDragListener : function(element){
		var self = this;
		element.addEventListener("drag", function(e){
			self.application.left += e.xrel;
			self.application.top += e.yrel;
		});
	},

	createApp : function(x, y){
		this.application = new Application({
			id : "NatBugWin",
			left : x,
			top : y,
			width : 844,
			height : 244,
			background : "rgba(80, 80, 0, 0.35)",
			backgroundImage : "private://assets/back.png",
			radius : 8,
			opacity : 0.94,
			alpha : 0.9,
			shadowBlur : 12,
			shadowColor : "#000000",
			shadowOffsetY : 10
		}).centerLeft();

		Native.__debugger = this.application;

		new UILabel(this.application, {
			id : "NatBugLabel",
			left : this.application.width - 68,
			top : 5,
			paddingLeft : 8,
			paddingRight : 8,
			height : 28,
			color : "#ffffff",
			background : "rgba(255, 255, 255, 0.04)",
			fontSize : 11,
			radius : 4,
			label : "NATBUG"
		});

		this.attachDragListener(this.application);
	},

	createTabController : function(){
		var	k = 0,
			myTabs = [];

		for (var i=0; i<this.panes.length; i++){
			var pane = this.panes[i];
			pane.init();
			pane.tab.target = pane.view;
			if (pane.tab.selected) pane.show();
			myTabs.push(pane.tab);
		}

		this.console = Native.layout.getElementById("_ntbgp_elements").pane;

		this.tabController = new UITabController(this.application, {
			name : "NatBugTabController",
			tabs : myTabs,
			left : 0,
			top : 3,
			height : 34
		});

		this.tabController.addEventListener("tabselect", function(e){
			var selectedView = e.tab.target,
				views = Native.layout.getElementsByClassName("natbug_view");

			views.each(function(){
				this.pane.hide();
			});

			selectedView.pane.show();
		});

		this.attachDragListener(this.tabController);
	},

	createView : function(id){
		return this.application.add("UIView", {
			id : id,
			left : 6,
			top : 46,
			width : this.application.width - 12,
			height : this.application.height - 54,
			scrollable : true,
			overflow : false,
			visible : false,
			class : "natbug_view"
		})
	},

	show : function(){
		if (this.loaded){
			this.application.show();
		}
	},

	hide : function(){
		if (this.loaded){
			this.application.hide();
		}
	}
};

/* Elements pane */
NatBug.panes.push({
	lines : [],
	nb : 0,
	space : 0,
	displayClosingTags : true,

	fontSize : 13,
	lineHeight : 18,

	tab : {
		id : "NatBugTab1",
		label : "Elements",
		background : "#882266",
		color : "#ffffff",
		selected : true,
		fontSize : 11,
		closable : false
	},

	init : function(){
		this.view = NatBug.createView("_ntbgp_elements");
		this.view.pane = this;
		this.view.scrollable = false;

		this.createSplitPanes();
		this.inspect();
	},

	createSplitPanes : function(){
		var self = this;
		var createSplitPane = function(view, id){
			return self.view.add("UIView", {
				id : id,
				left : 0,
				top : 0,
				scrollable : true,
				overflow : false,
				radius : 3,
				background : "#ffffff"
			})
		};

		this.paneLeft = createSplitPane("_ntbgp_elements_left");
		this.paneRight = createSplitPane("_ntbgp_elements_right");

		this.paneLeft.width = this.view.width * 70/100;
		this.paneRight.width = this.view.width * 30/100;

		this.paneRight.left = this.view.width * 70/100;

		this.paneLeft.move(-1, 0);
		this.paneRight.move(1, 0);
	},

	inspect : function(){
		var self = this,
			z = Native.scope;

		var dx = function(z, p, container, pcontainer){
			for (var i in z){
				if (isDOMElement(z[i]) && z[i].parent == p){

					z[i].__OPENING_TAG__ = self.insertOpeningTag(z[i], container);
					z[i].__OPENING_TAG__.closed = false;
					z[i].__CONTAINER__ = container;
					z[i].__CONTAINER__.__CLOSED__ = false;

					if (z[i].nodes.length > 0){
						self.space++;
	
						container.childrenContainer = self.createContainer(container);
						container.childrenContainer.__CLOSED__ = false;

						dx(z[i].nodes, z[i], container.childrenContainer, container);

						if (self.displayClosingTags){
							z[i].__CLOSING_TAG__ = self.insertClosingTag(z[i], container.childrenContainer);
							z[i].__CLOSING_TAG__.__CLOSED__ = false;
							container.k++;
							container.pixelHeight += self.lineHeight;
						}
		
						container.childrenContainer.width = container.childrenContainer.contentWidth;
						container.childrenContainer.height = container.childrenContainer.contentHeight;
					}

				}
			}

			self.space--;

			if (pcontainer) {
				pcontainer.k += container.k;
				pcontainer.pixelHeight += container.pixelHeight;
			}
		};

		this.nb = 0;
		this.paneLeft.k = 0;
		this.paneLeft.linenum = 0;
		this.paneLeft.pixelHeight = 0;
		this.paneLeft.__CLOSED__ = false;
		this.paneLeft.className = "__treePaneParent__";
		dx(z, null, this.paneLeft, null);

		/*
		Native.layout.getElementsByClassName("__treePaneContainer__").each(function(){
			this.open();
		});
		*/

	},

	refresh : function(container){
		var offset = 0;

		if (container.__CLOSED__) {
			offset = -container.height;
		} else {
			offset = container.height;
		}

		while (container.parent){
			var parentContainer = container.parent,
				under = false,
				eligibleArrow = false,
				elements = [];

			var z = parentContainer.childNodes;

			for (var i=0; i<z.length; i++){
				if (under) {
					if (eligibleArrow) {
						elements.push(z[i]);
					}
					if (z[i].hasClass("__treePaneArrow__")){
						eligibleArrow = true;
					}
				}
				if (z[i] == container) {
					under = true;
				}
			}

			elements.each(function(){
				this.top += offset;
			});

			if (parentContainer.hasClass("__treePaneContainer__")) {
				parentContainer.height += offset;
			}

			container = parentContainer;

		}

		return offset;
	},

	clear : function(){
		this.paneLeft.children.each(function(){
			this.remove();
		});

		this.paneLeft.scrollLeft = 0;
		this.paneLeft.scrollTop = 0;
	},

	_addLine : function(container, pixelHeight){
		this.nb++;
		container.linenum++;
		container.k++;
		container.pixelHeight += pixelHeight;
	},

	_resetContainer : function(container){
		container.k = 0;
		container.linenum = 0;
		container.pixelHeight = 0;
	},

	createContainer : function(parent){
		var self = this;
		var container = parent.add("UIView", {
			left : 32,
			top : 0 + parent.pixelHeight, //this.lineHeight*parent.k,
			width : parent.width-32,
			height : this.lineHeight,
			//background : "rgba(" + Math.round(255*Math.random()) + ", " + Math.round(255*Math.random()) + ", " + Math.round(255*Math.random()) + ", 0.4)",
			class : "__treePaneContainer__"
		});

		container.close = function(animate){
			var offset = 0,
				arrow = this.linkedArrow;

			if (this.__CLOSED__ || arrow.closing) return false;
		
			if (animate){
				this.fadeOut(150, function(){
					offset = self.refresh(this);
				});
			} else {
				offset = self.refresh(this);
			}
			this.__CLOSED__ = true;


			if (animate){
				arrow.closing = true;
				arrow.animate("angle", 0, -90, 100, function(){
					this.closing = false;
				});
			} else {
				arrow.angle = -90;
			}

			/* ScrollTop Hack
			 * avoid scrollTop to become higher than its max value
			 */

			var dy = self.paneLeft.scrollTop - offset,
				max = self.paneLeft.getMaxScrollTop();

			if (dy>max) {
				self.paneLeft.scrollTop -= (dy-max);
			}
		};

		container.open = function(animate){
			var arrow = this.linkedArrow;
			if (!this.__CLOSED__ || arrow.opening) return false;
			this.show();
			this.__CLOSED__ = false;

			self.refresh(this);

			if (animate){
				this.fadeIn(90);
				arrow.opening = true;
				arrow.animate("angle", -90, 0, 100, function(){
					this.opening = false;
				});
			} else {
				arrow.angle = 0;
			}
		};

		this._resetContainer(container);
		container.__CLOSED__ = false;

		parent.arrow = parent.add("UIButtonDown", {
			left : 0,
			top : 0 + this.lineHeight*parent.k - (this.lineHeight-1) - 2,
			width : this.lineHeight+1,
			height : this.lineHeight+1,
			color : "rgba(0, 0, 0, 0.6)",
			cursor : "pointer",
			class : "__treePaneArrow__"
		});

		parent.arrow.container = container;
		container.linkedArrow = parent.arrow;

		parent.arrow.addEventListener("mousedown", function(e){
			var k = this.container,
				node = k.firstChild.parent.previousSibling;

			if (k.__CLOSED__ === true){
				k.open(true);
			} else {
				k.close(true);
			}
		});

		return container;
	},

	log : function(text, color, container, offset=0){
		var l = container.add("UILabel", {
			paddingLeft : 0,
			left : this.lineHeight + offset,
			top : this.lineHeight * container.k,
			height : this.lineHeight,
			color : color,
			label : text,
			cursor : "pointer",
			textShadowBlur : 1,
			textShadowColor : "rgba(0, 0, 0, 0.04)",
			fontSize : this.fontSize,
			class : "__treePaneLabel__"
		});


		l.hoverize(
			function(){
				this.background = "rgba(255, 0, 0, 0.1)";
				//this.cursor = "pointer";
			},

			function(){
				this.background = "";
				//this.cursor = "arrow";
			}
		);

		this._addLine(container, l.height);

		return l;
	},

	getTagColor : function(element){
		var color = element.layer && element.layer.__visible ? "#333366" : "#888899";
		color = !element.hasOwnerDocument ? "#dd9999" : color;
		return color;
	},

	insertOpeningTag : function(element, container){
		var color = this.getTagColor(element);
		var attr = [],
			tag = '<';

		tag += element.type.replace('UI', '').toLowerCase();

		if (element.id){
			attr.push('id="'+element.id+'"');
		}

		if (element.className){
			attr.push('class="'+element.className+'"');
		}

		tag += (attr.length>0 ? " "+attr.join(" ") : '') + '>';

		if (element.text){
			tag += element.text;
		} else if(element.label){
			tag += element.label;
		}

		if (!element.hasChildren && this.displayClosingTags){
			tag += '</' + (element.type.replace("UI", '').toLowerCase()) + '>';
		}

		return this.log(tag, color, container);
	},

	insertClosingTag : function(element, container){
		var color = this.getTagColor(element);
		return this.log(
			'</' + (element.type.replace("UI", '').toLowerCase()) + '>',
			color,
			container,
			-32
		);
	},

	show : function(){
		this.view.show();
	},

	hide : function(){
		this.view.hide();
	}
});


/* Properties pane */
NatBug.panes.push({
	labels : {},
	values : {},

	tab : {
		id : "NatBugTab2",
		label : "Properties",
		background : "#882200",
		color : "#ffffff",
		fontSize : 11,
		closable : false
	},

	props : [
		"id", "type", "label", "name",

		"left", "top",
		"width", "height",
		"contentWidth", "contentHeight",
		"paddingLeft", "paddingRight",

		"opacity",
		
		"overflow",
		"position",

		"__left", "__top",
		
		"radius", "selected",
		"hasFocus", "hasChildren", "isOnTop",

		"scrollTop", "scrollLeft",

		"hover", "color", "background", "backgroundImage",
		"lineWidth", "lineHeight", "fontSize", "fontType", "textAlign",
		"shadowBlur", "shadowColor",
		"shadowOffsetX", "shadowOffsetY",

		"selection",

		"_layerPadding",
	],

	init : function(){
		var lines = 0,
			col = 0;

		this.view = NatBug.createView("_ntbgp_properties");
		this.view.pane = this;

		for (var l = 0; l<this.props.length; l++){
			var property = this.props[l],
				b1 = "rgba(0, 0, 0, 0.4)",
				b2 = "rgba(255, 255, 255, 0.05)";

			if (lines>=13){
				lines = 0;
				col++;
			}

			if (lines%2 == 0) {
				b1 = "rgba(0, 0, 0, 0.25)";
				b2 = "rgba(255, 255, 255, 0.075)";
			}

			this.add(property, lines, col, b1, b2);
			lines++;

		}

	},

	show : function(){
		var self = this,
			app = this.view.parent;

		this.view.show();

		window.onElementUnderPointer = function(e){
			if (!app.isPointInside(e.x, e.y)){
				// this.__lock("onElementUnderPointer");
				for (var l = 0; l<self.props.length; l++){
					var a = self.props[l];
					if (this[a] == undefined) {
						self.labels[a].color = "#66aa66";
						self.values[a].color = "#66aa66";
						self.values[a].label = 'n/a';
					} else {
						self.labels[a].color = "#ddffdd";
						self.values[a].color = "#ddffdd";
						self.values[a].label = this[a];
					}
				}
				// this.__unlock("onElementUnderPointer");
			}
		};
	},

	hide : function(){
		window.onElementUnderPointer = null;
		this.view.hide();
	},

	add : function(property, line, col, b1, b2){
		this.labels[property] = this.view.add("UILabel", {
			id : "natbug_label_" + property,
			paddingLeft : 5,
			left : 210*col,
			top : 15*line,
			width : 80,
			height : 14,
			color : "#66aa66",
			background : b1,
			fontSize : 10,
			label : property
		});

		this.values[property] = this.view.add("UILabel", {
			id : "natbug_value_" + property,
			paddingLeft : 5,
			left : 82 + 210*col,
			top : 15*line,
			width : 120,
			height : 14,
			color : "#66aa66",
			background : b2,
			label : "",
			fontSize : 10,
			radius : 2
		});

		NatBug.attachDragListener(this.labels[property]);
		NatBug.attachDragListener(this.values[property]);
	}
});


/* Stats pane */
NatBug.panes.push({
	labels : {},
	values : {},

	tab : {
		id : "NatBugTab3",
		label : "Stats",
		background : "#668822",
		color : "#ffffff",
		fontSize : 11,
		closable : false,
		opacity : 0.9
	},

	init : function(){
		var b1 = "rgba(0, 0, 0, 0.4)",
			b2 = "rgba(255, 255, 255, 0.05)";

		this.view = NatBug.createView("_ntbgp_stats");
		this.view.pane = this;

		this.labels.fps = this.view.add("UILabel", {
			id : "natbug_label_fps",
			paddingLeft : 5,
			left : 0,
			top : 0,
			width : 80,
			height : 20,
			color : "#66aa66",
			background : b1,
			fontSize : 13,
			label : "FPS"
		});

		this.values.fps = this.view.add("UILabel", {
			id : "natbug_value_fps",
			paddingLeft : 5,
			left : 82,
			top : 0,
			width : 120,
			height : 20,
			color : "#66aa66",
			background : b2,
			label : "0 ms",
			fontSize : 13,
			radius : 2
		});

	},

	show : function(){
		this.view.show();
	},

	hide : function(){
		this.view.hide();
	}
});


Canvas.prototype.debug = function(){
	var context = this.getContext("2D"),
		__DEBUG_SHOW_LAYERS__ = true,
		__DEBUG_SHOW_ORDER__ = false;

	if (!this.host || this.host._root == Native.__debugger){
		return false;
	}

	if (__DEBUG_SHOW_LAYERS__){
		if (this.host && this.host.hover){
			context.fillStyle = "rgba(180, 180, 50, 0.15)";
			context.strokeStyle = "rgba(180, 180, 255, 0.45)";
		} else {
			context.fillStyle = "rgba(180, 180, 0, 0.04)";
			context.strokeStyle = "rgba(180, 180, 0, 0.08)";
		}

		var padding = this.host.layer ? this.host.layer.padding : 0;

		context.fillRect(
			-this.padding, 
			-this.padding, 
			this.clientWidth,
			this.clientHeight
		);

		context.strokeRect(
			-this.padding, 
			-this.padding, 
			this.clientWidth,
			this.clientHeight
		);
	}

	if (__DEBUG_SHOW_ORDER__){
		context.fontSize = 9;
		if (this.host && this.host._hover){
			context.setText(
				this.host._nid,
				this.host._width + 7,
				9,
				"white",
				"rgba(0, 0, 0, 0.7)"
			);
		} else {
			context.setText(
				this.host._nid,
				this.host._width + 7,
				9,
				"rgba(200, 0, 0, 0.8)",
				"rgba(0, 0, 0, 0.7)"
			);
		}
	}
};

Native.FPS = {
	date : 0,
	count : 0,
	old : 0,
	loaded : false,

	init : function(){
		this.canvas = new Canvas(50, 30);
		this.context = this.canvas.getContext("2D");
		this.canvas.left = 0;
		this.canvas.top = window.height-30;
		Native.canvas.add(this.canvas);
		this.loaded = true;
	},

	start : function(){
		this.date = + new Date();
	},

	show : function(){
		var r = 0.1 + (+ new Date()) - this.date,
			fps = 1000/r;

		this.count++;

		if (this.count%30==0){
			this.old = Math.round((r-0.1)*10)/10;
		} 				
		
		if (this.loaded) {
			Native.layout.getElementById("natbug_value_fps").label = this.old + " ms";
			/*
			this.context.setColor("#000000");
			this.context.fillRect(0, 0, 60, 30);
			this.context.setColor("yellow");
			this.context.fillText(this.old + " ms", 8, 20);
			*/
		}
		
		return r;
	}
};

NatBug.init();

