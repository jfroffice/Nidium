#!/usr/bin/env python2.7

# Copyright 2016 Nidium Inc. All rights reserved.
# Use of this source code is governed by a MIT license
# that can be found in the LICENSE file.

from konstructor import Build
from konstructor import Builder
from konstructor import Konstruct
from konstructor import Variables
from konstructor import Deps
from konstructor import CommandLine
from konstructor import Tests

Gyp = Builder.Gyp

Variables.set('product', 'nidiumserver')

@Deps.register("jemalloc")
def jemalloc():
    return {
        "location": Deps.GitRepo("https://github.com/jemalloc/jemalloc.git", tag="4.1.0"),
        "build": ["./autogen.sh", "./configure --enable-prof", "make"],
        "outputs": ["lib/libjemalloc.a"]
    }

Deps.set(
    "linenoise",
    "libnostd",
    Deps.Konstruct("nidiumcore", "nativejscore/configure"),
)

@Deps.register("libnostd")
def libnostd():
    return {
        "location": Deps.GitRepo("http://25thandClement.com/~william/projects/libnostd.git", revision="5b04fba951f5912a50c4baf47808cfca24f41c19"),
    }

@Deps.register("linenoise")
def linenoise():
    return {
        "location": Deps.GitRepo("https://github.com/antirez/linenoise.git", tag="1.0"),
    }

@CommandLine.option("--jemalloc", default=False)
def jemalloc(jemalloc):
    if jemalloc:
        Deps.set("jemalloc")
        Gyp.set("jemalloc", 1)

@CommandLine.option("--no-fork", default=False)
def nofork(nofork):
    if nofork:
        Gyp.set("nofork", 1)

@CommandLine.option("--heap-profiling", default=False)
def heapProfiling(profiling):
    if profiling:
        jemalloc(True)
        Deps.set("gperftools")



@CommandLine.option("--unit-tests")
@CommandLine.option("--auto-tests")
def testServer(unitTests, autoTests):
    tests = []

    if unitTests:
        tests.append("dist/nidium-server nativejscore/var/js/tests/unittests/manual_suites.js")

    # Autotests does not have a "loader" for testing with Nidium Server yet
    # if autoTests:
    #     tests.append("dist/nidium-server nativejscore/var/js/tests/autotests/auto_suites.js")

    Tests.register(tests)

if __name__ == '__main__':
    Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi")
    Build.add(Gyp("gyp/nidium-server.gyp"));
    Konstruct.start()
