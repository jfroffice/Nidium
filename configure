#!/usr/bin/env python2.7
import sys 
import os

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Konstruct
from konstructor import Utils
from konstructor import Variables 
from konstructor import Tests

Gyp = Builder.Gyp

Deps.set(
    "portaudio",
    "zita-resampler",
    "depot_tools",
    "skia",
    "libzip",
    "lss",
    "breakpad",
    "angle",
    "basekit",
    "libcoroutine",
    "SDL2",
    "ffmpeg",
    Deps.Konstruct("nativejscore", "nativejscore/configure")
)

Platform.setEnviron("MACOSX_DEPLOYMENT_TARGET=10.7")

Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi")

DEPEDENCY_REPO = Variables.get("depsRepo")

@Deps.register("portaudio")
def portaudio():
    return {
        "location": DEPEDENCY_REPO + "/portaudio.tgz",
        "build": ["./configure --without-jack --without-asihpi --without-winapi --enable-cxx", "make -j1", "make  src/common/pa_ringbuffer.o"],
        "outputs": ["lib/.libs/libportaudio.a"]
    }

@Deps.register("zita-resampler")
def zitaresampler():
    return {
        "location": DEPEDENCY_REPO + "/zita-resampler-1.3.0.tar.bz2",
        "patchs": ["zita.patch"],
        "chdir": "libs/",
        "build": ["make"],
        "outputs": ["libzita-resampler(.a|.lib)"]
    }

@Deps.register("skia")
def skia():
    if Platform.wordSize == 64:
        exports = "GYP_DEFINES='skia_arch_width=64 skia_osx_deployment_target=10.7'"
    else:
        exports = "GYP_DEFINES='skia_arch_width=32 skia_osx_deployment_target=10.7'"

    exports += " CPPFLAGS=-I%s" % (os.path.join(Deps.getDir(), "zlib"))
    exports += " LDFLAGS=-L%s" % (os.path.join(Deps.getDir(), "zlib"))

    makeFlags = ""
    if Variables.get("verbose"):
        makeFlags = "V=1"

    Gyp.set("skia_resource_cache_mb_limit", 256)

    # Add depot_tools to path needed for skia
    Platform.setEnviron("PATH+=" + os.path.join(Deps.getDir(), "depot_tools"))

    return {
        "location": Deps.Gclient("https://skia.googlesource.com/skia.git", revision="ed4dc2afaa4285a6d10a16fca77d1b9cbe3083d3"),
        "build": [exports + " ./gyp_skia", exports + " make tests BUILDTYPE=Release " + makeFlags + " -j " + str(Platform.cpuCount)],
        "patchs": ["skia_defines.patch", "skia_gl.patch", "skia_python27.patch", "skia_clang.patch"],
        "outputs": [
            "out/Release/libskia_pdf.a",
            "out/Release/libskia_ports.a",
            "out/Release/libskia_skgpu.a",
            "out/Release/libskia_utils.a",
            "out/Release/libskia_effects.a",
            "out/Release/libskia_core.a",
            "out/Release/libskia_sfnt.a",
            "out/Release/libskia_images.a",
            "out/Release/libskia_opts_ssse3.a",
            "out/Release/libskia_opts.a"
        ]
    }

@Deps.register("libzip")
def libzip():
    return {
        #"location": DEPEDENCY_REPO + "/libzip-0.10.1.tar.bz2",
        "location": "http://www.nih.at/libzip/libzip-1.1.2.tar.gz",
        "build": ["./configure --disable-shared --with-zlib=%s/zlib/" % (Deps.getDir()), "make"],
        "outputs": ["lib/.libs/libzip.a"]
    }

@Deps.register("lss")
def lss():
    return {
        "location": Deps.GitRepo("https://chromium.googlesource.com/linux-syscall-support", revision="348bdf8d32b37c8fb2627df7a0a977d1d640e1fc")
    }

@Deps.register("angle")
def angle():
    return {
         "location": DEPEDENCY_REPO + "/angle.tar.gz"
        #"location": Deps.GitRepo("https://chromium.googlesource.com/angle/angle", branch="chrome_m36"),
        #"build": ["python src/commit_id.py src/commit_id.h"]
    }

@Deps.register("breakpad")
def breakpad():
    return {
        "location": Deps.SvnRepo("http://google-breakpad.googlecode.com/svn/trunk/", 1435)
       #"location": Deps.GitRepo("https://chromium.googlesource.com/breakpad/breakpad", branch="chrome_49")    }
    }

@Deps.register("SDL2")
def SDL2():
    # SDL2 Build as framework
    #build: ["xcodebuild -configuration 'Release' CONFIGURATION_BUILD_DIR='out' -target 'Framework'"], 
    #outputs["SDL2/Xcode/SDL/out/SDL2.framework"])
    return {
        "location": "https://www.libsdl.org/release/SDL2-2.0.4.tar.gz",
        "chdir": "build",
        "build": ["../configure", "make"],
        "outputs": ["build/.libs/libSDL2.a"]
    }

@Deps.register("depot_tools")
def depotTools():
    Deps.Gclient.setExec(os.path.join("depot_tools", "gclient"))
    return {
        "location": Deps.GitRepo("https://chromium.googlesource.com/chromium/tools/depot_tools.git", revision="aa6235b1f6dbc9a7fa5139ef8964928b6348a4c4")
    }

@Deps.register("basekit")
def basekit():
    return {
        "location": Deps.GitRepo("https://github.com/stevedekorte/basekit.git", revision="a3e54ba83b85f530dc9442a33d2779240ed96189"),
        "build": ["make"],
        "patchs": ["basekit.patch"],
        "outputs": ["_build/lib/libbasekit(.a|.lib)"]
    }

@Deps.register("libcoroutine")
def libcoro():
    patchs = ["libcoroutine.patch"]

    if Konstruct.config("valgrind"):
        patchs.append("libcoroutine.debug.patch")

    return {
        "location": Deps.GitRepo("https://github.com/stevedekorte/coroutine.git", revision="b0bf11d8a0ec70bc0f1f5043513d334e1eff15fc"),
        "patchs": patchs,
        "build": ["make"],
        "outputs": [["_build/lib/liblibcoroutine(.a|.lib)", "libcoroutine\\1"]]
    }

@Deps.register("ffmpeg")
def ffmpeg():
    return {
        "location": Deps.GitRepo("git://source.ffmpeg.org/ffmpeg.git", tag="n2.5.11"),
        "patch": [],
        "build":
        [
            "./configure \
            --disable-vaapi --disable-avdevice --disable-postproc --disable-avfilter --disable-ffserver --disable-lzma --disable-bzlib \
            --enable-decoder=ac3,aac,mp3,vorbis,pcm_s16be_planar,pcm_s16le,pcm_s16le_planar,pcm_s24be,pcm_s24daud,pcm_s24le,pcm_s24le_planar,pcm_s32be,pcm_s32le,pcm_s32le_planar,pcm_s8,pcm_s8_planar,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,h264,mpeg4,mpeg2video,wmv1,wmv2,wmv3,wmv3_crystalhd,wmv3_vdpau,wmv3image,wmalossless,wmapro,wmav1,wmav2,wmavoice,vc1,vc1_crystalhd,vc1_vdpau,vc1image\
            --enable-parser=vorbis,mpegaudio,mpegvideo,mpeg4video,h264,vp8,aac,vc1\
            --enable-demuxer=matroska,mp3,ogg,vorbis,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,h264,mpegvideo,aac,mov,avi,wav,asf", 
            "make"
        ],
        "outputs": 
        [
            "libavcodec/libavcodec(.a|.lib)",
            "libswresample/libswresample(.a|.lib)",
            "libavutil/libavutil(.a|.lib)",
            "libavformat/libavformat(.a|.lib)",
            "libswscale/libswscale(.a|.lib)"
        ]
    }

@CommandLine.option("--auto-tests")
def auotTestStudio(autoTests):
    if autoTests is None:
        return

    if autoTests == "" or autoTests == "all":
        autoTests = "core,studio,framework"

    tests = []
    nidium = ""
    if Platform.system == "Linux":
        nidium = "framework/dist/nidium"
    elif Platform.system == "Darwin":
        nidium = "framework/dist/nidium.app/Contents/MacOS/nidium"
    else:
        # TODO
        Utils.exit("TODO : Unsupported platform for tests")

    # Find Konstrutor path, to run Dokumentor
    dokumentor = os.path.dirname(os.path.abspath(sys.modules[Konstruct.__module__].__file__))
    dokumentor = os.path.join(dokumentor, "dokumentor.py")

    if "core" in autoTests:
	Utils.run(dokumentor + " exampletest nativejscore/var/rawdoc/ > nativejscore/var/js/tests/autotests/auto_suites.js")
        tests.append("nativejscore/var/js/tests/autotests/autotests.nml")

    if "studio" in autoTests:
	Utils.run(dokumentor + " exampletest var/rawdoc/ > var/js/tests/autotests/auto_suites.js")
        tests.append("var/js/tests/autotests/autotests.nml")

    if "framework" in autoTests:
	Utils.run(dokumentor + " exampletest framework/var/rawdoc/ > framework/var/js/tests/autotests/auto_suites.js")
        tests.append("framework/var/js/tests/autotests/autotests.nml")

    Tests.register(["%s %s" % (nidium, t) for t in tests])

@CommandLine.option("--unit-tests")
def testStudio(unitTests):
    if not unitTests:
        return

    if unitTests == "" or unitTests == "all":
        unitTests = "core,studio,framework"

    tests = []

    if "core" in unitTests:
        tests.append("framework/dist/nidium nativejscore/var/js/tests/unittests/unittests.nml")
    if "studio" in unitTests:
        tests.append("framework/dist/nidium var/js/tests/unittests/unittests.nml")
    if "framework" in unitTests:
        tests.append("framework/dist/nidium framework/var/js/tests/unittests/unittests.nml")

    Tests.register(tests)

Build.add(Gyp("gyp/all.gyp"));

if __name__ == '__main__':
    # We need to apply patch to rapidxml.hpp, 
    # since it's not a real dependency, we do the patch "by hand"
    Utils.patch(".", os.path.join(Deps.getDir(), "rapidxml.patch"));

    Konstruct.start() 
